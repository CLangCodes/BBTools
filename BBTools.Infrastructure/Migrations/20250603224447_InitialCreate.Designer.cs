// <auto-generated />
using System;
using BBTools.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BBTools.Infrastructure.Migrations
{
    [DbContext(typeof(BBContext))]
    [Migration("20250603224447_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BBTools.Domain.Models.Antigen", b =>
                {
                    b.Property<string>("ISBTNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SystemId")
                        .HasColumnType("int");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ISBTNumber");

                    b.HasIndex("SystemId");

                    b.ToTable("Antigens");
                });

            modelBuilder.Entity("BBTools.Domain.Models.AntigenSystem", b =>
                {
                    b.Property<int>("SystemId")
                        .HasColumnType("int");

                    b.Property<string>("Genes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhenoTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemId");

                    b.ToTable("AntigenSystems");
                });

            modelBuilder.Entity("BBTools.Domain.Models.PanelCell", b =>
                {
                    b.Property<string>("Lot")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PanelCellNumber")
                        .HasColumnType("int");

                    b.Property<int>("C")
                        .HasColumnType("int");

                    b.Property<int>("Cellano")
                        .HasColumnType("int");

                    b.Property<int>("Cw")
                        .HasColumnType("int");

                    b.Property<int>("D")
                        .HasColumnType("int");

                    b.Property<int>("E")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<int>("F")
                        .HasColumnType("int");

                    b.Property<int>("Fya")
                        .HasColumnType("int");

                    b.Property<int>("Fyb")
                        .HasColumnType("int");

                    b.Property<int>("HLAPos")
                        .HasColumnType("int");

                    b.Property<int>("Jka")
                        .HasColumnType("int");

                    b.Property<int>("Jkb")
                        .HasColumnType("int");

                    b.Property<int>("Jsa")
                        .HasColumnType("int");

                    b.Property<int>("Jsb")
                        .HasColumnType("int");

                    b.Property<int>("Kell")
                        .HasColumnType("int");

                    b.Property<int>("Kpa")
                        .HasColumnType("int");

                    b.Property<int>("Kpb")
                        .HasColumnType("int");

                    b.Property<int>("Lea")
                        .HasColumnType("int");

                    b.Property<int>("Leb")
                        .HasColumnType("int");

                    b.Property<int>("LittleC")
                        .HasColumnType("int");

                    b.Property<int>("LittleE")
                        .HasColumnType("int");

                    b.Property<int>("LittleS")
                        .HasColumnType("int");

                    b.Property<int>("Lua")
                        .HasColumnType("int");

                    b.Property<int>("Lub")
                        .HasColumnType("int");

                    b.Property<int>("M")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("N")
                        .HasColumnType("int");

                    b.Property<int>("P1")
                        .HasColumnType("int");

                    b.Property<int>("S")
                        .HasColumnType("int");

                    b.Property<int>("Vell")
                        .HasColumnType("int");

                    b.Property<int>("Xga")
                        .HasColumnType("int");

                    b.HasKey("Lot", "PanelCellNumber");

                    b.ToTable("PanelCells");
                });

            modelBuilder.Entity("BBTools.Domain.Models.Antigen", b =>
                {
                    b.HasOne("BBTools.Domain.Models.AntigenSystem", "AntigenSystem")
                        .WithMany()
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AntigenSystem");
                });
#pragma warning restore 612, 618
        }
    }
}
