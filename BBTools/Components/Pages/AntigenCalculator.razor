@page "/antigenCalculator"
@rendermode InteractiveServer
@using BBTools.Models
@using System.Diagnostics
@inject ILogger<AntigenCalculator> Logger

<h3>Antigen Screener Helper Tool</h3>

<p>In order to obtain the required number of antigen negative Leukoreduced Red Cells matching a patients phenotype, Medical Technologists must screen their inventory.
    This tool is designed with the intention of aiding Technologists with the decision to screen current inventory, or place an order with local blood providers. 
    This tool <b>has not</b> been tested or approved by any healthcare agency and usage must be carefully considered. Please consult appropriate authority before 
    using this tool in your laboratory.
</p>
<h5 class="antigen-header">Select Antigens</h5>

<div class="mb-3">
    <label>Units Required:</label>
    <input type="number" class="form-control" @bind="UnitsRequired" @bind:after="Calculate" min="1" />
</div>

<div class="antigen-grid-container">
    @foreach (var antigen in Antigens)
    {
        <div class="antigen-card">
            <label>
                <input type="checkbox" @bind="antigen.IsSelected" @bind:after="Calculate" /> 
                <span class="antigen-name">@antigen.Name</span>
            </label>
            <div class="antigen-frequency">@($"{antigen.Frequency:P1}")</div>
        </div>
    }
</div>

@if (CalculatedUnits.HasValue)
{
    <p class="mt-3">
        You would need to screen <strong>@CalculatedUnits</strong> units to find <strong>@UnitsRequired</strong> antigen negative LRC@{ if (UnitsRequired > 1) }s.
    </p>
}
else if (ShowWarning)
{
    <p class="mt-3 text-danger">
        ⚠️ No feasible match found — selected antigens are too rare to calculate a reliable screening count.
    </p>
}

@code {
    private List<AntigenSelection> Antigens = new();
    private int _unitsRequired = 1;
    private int UnitsRequired
    {
        get => _unitsRequired;
        set
        {
            _unitsRequired = Math.Max(1, value);
            Calculate();
        }
    }
    private int? CalculatedUnits = null;
    private bool ShowWarning = false;

    protected override void OnInitialized()
    {
        var frequencies = new GlobalAntigenFrequencies();
        var props = typeof(GlobalAntigenFrequencies).GetProperties();

        foreach (var prop in props)
        {
            Antigens.Add(new AntigenSelection
                {
                    Name = prop.Name,
                    Frequency = (decimal)(prop.GetValue(frequencies) ?? 0),
                    IsSelected = false
                });
        }
    }  

    private void OnUnitsChanged(ChangeEventArgs e)
    {
        if (UnitsRequired < 1)
            UnitsRequired = 1;

        Calculate();
        StateHasChanged();
    }

    private void OnAntigenToggled(AntigenSelection antigen, ChangeEventArgs e)
    {
        antigen.IsSelected = (bool)e.Value!;
        Calculate();
    }

    private void Calculate()
    {
        Debug.WriteLine("Calculate Called");
        try
        {
            var selected = Antigens.Where(a => a.IsSelected).ToList();

            if (!selected.Any())
            {
                CalculatedUnits = null;
                ShowWarning = false;
                return;
            }


            var p = Antigens
                .Where(a => a.IsSelected)
                .Aggregate(1.0M, (acc, a) => acc * (1 - a.Frequency));

            if (p <= 0)
            {
                CalculatedUnits = null;
                ShowWarning = true;
                return;
            }

            ShowWarning = false;
            CalculatedUnits = (int)Math.Ceiling(UnitsRequired / p);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error calculating screening units");
            CalculatedUnits = null;
            ShowWarning = true;
        }
    }
}